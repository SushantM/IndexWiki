import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Comparator;
import java.util.PriorityQueue;

/**
 * This class merges the tempFiles generated by Indexer and generates the primary index
 * Generates a dense second level index on the primary index storing the word and offset in Primary
 * Generates a sparse third level index on secondary for entries like ( aa,ab,ac,...., zx,zy,zz etc)
 * @author sushant
 *
 */
public class PrimaryCreator {
	protected static final RecordForMerge PrimaryCreator$RecordForMerge = null;
	private int fileCount;
	private String outDir;
	long noOfRecords;
	public PrimaryCreator(){
		fileCount = 0 ;
		outDir = "";
		noOfRecords=0;
	}
	public PrimaryCreator( int n, String outD) {
		fileCount = n;
		outDir = outD;
		noOfRecords=0;
	}
	class RecordForMerge {
		String key;
		String line;
		BufferedReader value;
		
	}
	public void createPrimaryIndex() throws IOException {
		System.gc();
		System.out.println("Started merging...");
		int i;
		long offset=0,secondOffset = 0;
		final PriorityQueue<RecordForMerge> q =
			new PriorityQueue<PrimaryCreator.RecordForMerge>(	fileCount,
			new Comparator<RecordForMerge>() {
				public int compare( RecordForMerge n1, RecordForMerge n2 ) {
					return n1.key.compareTo(n2.key);
					/*
					if( ( k= n1.key.compareTo(n2.key) ) == 0 ) {
						return 0;
					}
					else if ( k>0) {
						return 1;
					}
					else {
						return -1;
					}*/
				}
		});
		BufferedReader fileArray[] = new BufferedReader[fileCount+1];
		StringBuilder word = new StringBuilder();
		StringBuilder third = new StringBuilder();
		boolean empty[] = new boolean[fileCount+1];
		boolean ptr[] = new boolean[fileCount+1];
 		for( i=0; i<fileCount; i++ ) {
			fileArray[i] = new BufferedReader( new FileReader( new String( outDir+"/tempDump_"+i ) )  );
			empty[i] = false;
			ptr[i] = true;
			RecordForMerge r = new RecordForMerge();
			String l= fileArray[i].readLine();
			word.setLength(0);
			int indexOfE=l.indexOf('=');
			word.append(l.toCharArray(),0, indexOfE) ;
			r.key = word.toString();
			word.setLength(0);
			indexOfE++;
			word.append(l.toCharArray(), indexOfE,l.length()-indexOfE);
			r.line = word.toString();
			r.value = fileArray[i];
			
			q.add(r);
		}
 		FileWriter fwr = new FileWriter( new File (outDir+"/primaryIndex") );
 		BufferedWriter wr = new BufferedWriter (fwr);
 		FileWriter fwr_sec = new FileWriter( new File (outDir+"/secondaryIndex") );
 		BufferedWriter wr_sec = new BufferedWriter (fwr_sec);
		char k1 = '-', k2='-';
		
 		while(!q.isEmpty()) {
 			RecordForMerge smallest = q.peek();
 			StringBuilder lineTo = new StringBuilder();
 			StringBuilder keyTo = new StringBuilder();
 			keyTo.append(smallest.key+'=') ;
 			do {
 				RecordForMerge sameRecord = q.poll();
 				
 				lineTo.append(sameRecord.line);
 				
 				String nextLine = sameRecord.value.readLine();
 	 			if( nextLine==null )
 	 				continue;
 				RecordForMerge r = new RecordForMerge();
 				word.setLength(0);
 				try {
 					int indexOfE=nextLine.indexOf('=');
 					word.append(nextLine.toCharArray(),0,indexOfE ) ;
 					r.key = word.toString();
 					word.setLength(0);
 					indexOfE++;
 					word.append(nextLine.toCharArray(), indexOfE, nextLine.length()-indexOfE );
 					r.line = word.toString();
 					r.value = sameRecord.value;
 					q.add(r);
 				} catch (Exception e) {	}
 				
 			}while( !q.isEmpty() &&  smallest.key.compareTo(q.peek().key)==0 );

 			// to cut the posting list if its > 1300000 charecter i.e to save memory
 			int x=lineTo.indexOf(",",1300000);
        	if( x!=-1) {
        		StringBuilder newLine = new StringBuilder();
        		newLine.append(lineTo.toString().toCharArray(),0,x);
        		lineTo.setLength(0);
        		lineTo.append(newLine);
        	}
 			
 			wr.write(lineTo.toString());
 			wr.write('\n');
 			
 			keyTo.append( offset );
 			wr_sec.write(keyTo.toString());
 			wr_sec.write('\n');
 			
 			offset += lineTo.length()+1;
 			noOfRecords++;
 		}
 		
 		wr.close();
 		wr_sec.close(); 		
 		System.out.println("Generating third level index...");
 		FileWriter fwr_third = new FileWriter( new File (outDir+"/thirdIndex") );
 		BufferedWriter wr_third = new BufferedWriter (fwr_third);
 		BufferedReader secI = new BufferedReader( new FileReader( new String( outDir+"/secondaryIndex" ) )  );
 		String l;
 		
 		while( (l=secI.readLine())!= null ) {
 			if( l.charAt(1) == '=' ) {
 				third.setLength(0);
 				third.append(l.charAt(0));
 				third.append('=');
 				third.append(secondOffset);
 				
 	 			wr_third.write(third.toString());
 	 			wr_third.write('\n');
 			}
 			else if( l.charAt(0) != k1 || l.charAt(1) !=k2 ) {
 				k1=l.charAt(0);
 				k2=l.charAt(1);
 				
 				third.setLength(0);
 				third.append(k1);
 				third.append(k2);
 				third.append('=');
 				third.append(secondOffset);
 				
 	 			wr_third.write(third.toString());
 	 			wr_third.write('\n');
 			}
 			secondOffset += l.length()+1;	
 		}
 		third.setLength(0);
 		third.append("z{="+secondOffset);
			wr_third.write(third.toString());
			wr_third.write('\n');
			wr_third.close();
			secI.close();
			
			
	 		FileWriter temp = new FileWriter( new File (outDir+"/noOfRecs") );
	 		BufferedWriter no_wr = new BufferedWriter (temp);
	 		third.setLength(0);
	 		third.append(noOfRecords);
	 		no_wr.write(third.toString());
	 		no_wr.write('\n');
	 		no_wr.close();
	 		System.out.println("Indexing Complete!!");
	}
	/**
	 * Return total number of records in Primary Index
	 * @return
	 */
	long getRecordNo() {
		return noOfRecords;
	}
}